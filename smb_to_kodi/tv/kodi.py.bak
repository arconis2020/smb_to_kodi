import requests


class Kodi:

	def __init__(self):
		self.url = "http://lgtv:8080/jsonrpc"
		self.struct = {"jsonrpc":"2.0", "id":"1", "method":"Player.Open", "params":{}}
		self.headers = {"Content-Type": "application/json"}

	def nowPlaying(self):
		self.struct["method"] = "Player.GetItem"
		self.struct["params"] = {"playerid":1}
		r = requests.post(url=self.url, json=self.struct, headers=self.headers)
		print r.json()
		return True if r.json()["result"]["item"]["label"] else False

	def addToPlaylist(self, filename):
		self.struct["method"] = "Playlist.Add"
		self.struct["params"] = {"playlistid":1, "item":{"file":filename}}
		r = requests.post(url=self.url, json=self.struct, headers=self.headers)
		o = r.json().get("result")
		if o and o == "OK":
			print "Added {a} to playlist successfully!".format(a=filename)
		else:
			print "PROBLEM: {a} not added to playlist. Try a different way.".format(a=filename)

	def clearPlaylist(self):
		self.struct["method"] = "Playlist.Clear"
		self.struct["params"] = {"playlistid":1}
		r = requests.post(url=self.url, json=self.struct, headers=self.headers)
		print "Clearing playlist: %s" % r.json().get("result")

	def playIt(self):
		self.struct["method"] = "Player.Open"
		self.struct["params"] = {"item":{"playlistid":1}}
		r = requests.post(url=self.url, json=self.struct, headers=self.headers)
		print "Playing: %s" % r.json().get("result")

	def nextitem(self):
		self.struct["method"] = "Player.GoTo"
		self.struct["params"] = {"playerid":1, "to":"next"}
		r = requests.post(url=self.url, json=self.struct, headers=self.headers)
		print "Skipping to next stream: %s" % r.json().get("result")

	def nextstream(self):
		self.struct["method"] = "Player.SetAudioStream"
		self.struct["params"] = {"playerid":1, "stream":"next"}
		r = requests.post(url=self.url, json=self.struct, headers=self.headers)
		print "Skipping to next stream: %s" % r.json().get("result")

	def subsoff(self):
		self.struct["method"] = "Player.SetSubtitle"
		self.struct["params"] = {"playerid": 1, "subtitle": "on", "enable": True}
		print json.dumps(self.struct)
		r = requests.post(url=self.url, json=self.struct, headers=self.headers)
		print "Dropping subtitles: %s" % r.json().get("result")

	def rewind(self):
		self.struct["method"] = "Player.Seek"
		self.struct["params"] = {"playerid":1, "value":{"step":"smallbackward"}}
		r = requests.post(url=self.url, json=self.struct, headers=self.headers)
		print "Rewinding a small backward step: %s" % r.json().get("result")
